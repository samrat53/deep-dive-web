import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
// const client = new PrismaClient();
import client from "@/db";

export async function GET() {

  try {    
    const user=await client.users.findFirst();
    return NextResponse.json({
      username: user?.username,
      password: user?.password
    })
  } catch (error) {
    return NextResponse.json({
      error: `error while fetching ${JSON.stringify(error)}`
    })
  }
  return Response.json({
    email: "sama@gmail.com",
    name: "samrat",
  });
}
/*{
    this is same as:

    app.get("/api/user",(req,res)=>{
        return res.json({
            name:"kdkl",
            email:"jjdn"
        })
    })
}*/

export async function POST(req: NextRequest) {
  const body = await req.json();
  console.log(body);
  console.log(req.headers.get("authorization"));
  console.log(req.nextUrl.searchParams.get("name"));
  try {
    await client.users.create({
      data: {
        username: body.username,
        password: body.password,
      },
    });
    return Response.json({ message: "loged in" }); // or could use NextResponse.json()
  } catch (error) {
    return NextResponse.json(
      {
        message: `error while signin up: ${JSON.stringify(error)}`,
      },
      {
        status: 411,
      }
    );
  }

}

// npm i prisma
// npx prisma init
// make model and replace .env
// npx prisma migrate dev --name first migration name
// npx prisma generate (if client is not generated by default)
